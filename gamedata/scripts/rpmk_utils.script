--[[    
   Repackable Medpacks
   Author: AntGlobes
   Source: https://www.moddb.com/mods/repackable-medpacks
   Version: v1.0
   Last Modified: 10/12/23
   Purpose: Utility functions, some reused from past addons. Credited if not authored by AG
--]]

get_config = rpmk_mcm.get_config
set_config = rpmk_mcm.set_config

--- Check if table contains a key
---@param tbl table
---@param key any
function contains(tbl, key)
    for k, v in pairs(tbl) do
        if k == key then
            return true, v
        end
    end
    return false
end

--- Get if the index of a value in a table, default by value
---@param tbl table
---@param value any
---@param by_key boolean
function index_of(tbl, value, by_key)
    for k, v in pairs(tbl) do
        if not by_key then 
            if v == value then
                return k
            end
        else
            if k == value then
                return k
            end
        end
    end
    return false
end

--- Get all total of all values in a table
---@param tbl table
function sum(tbl)
    local sum = 0
    for _, val in pairs(tbl) do
        sum = sum + val
    end
    return sum
 end

 --- Get all total of all values in any nested tables
 ---@param tbl table
 function sum_nested(tbl)
    local sum = 0
    for sect, t in pairs(tbl) do
        for k, v in pairs(t) do
            if type(t[k]) == "number" then
                sum = sum + v
            end
        end
    end
    return sum
 end

 --- table.concat but by key 
 ---@param tbl table
 function concat_pairs(tbl)
    local result = ""
    for key, value in pairs(tbl) do
        result = result .. key ..  ", "
    end
    
    result = result:sub(1, -3)
    return result
end

--- table.concat alternative
---@param tbl table
function concat(tbl)
    local result = ""
    for key, value in pairs(tbl) do
        result = result ..value..  ", "
    end
    
    result = result:sub(1, -3)
    return result
end

--- Get a list of sections from objects
---@param objs table{game_objects}
function obj_to_sect_list(objs)
    local sect_list = {}
    for _, obj in ipairs(objs) do
        sect_list[#sect_list + 1] = obj:section()
    end
    --printf("sect list %s", table.concat(sect_list, ","))
    return sect_list
end

--- Display News Manager message
---@param text_string string
---@param values any
---@param medpack_type string
function display_msg(text_string, values, medpack_type)
    if not get_config("main", "display_msg") then return end
    printf("Displaying message: %s with icon for %s", get_translation(text_string, values), medpack_type)
    news_manager.send_tip(db.actor, get_translation(text_string, values), nil, "repack_medpack_"..medpack_type, 1500)
end

--- Display Screen message
---@param message string
---@param values any
---@param delay number
---@param colour ARGB
function display_screen_msg(message, values, delay, colour)
    actor_menu.set_msg(1, get_translation(message, values), delay, colour)
end

--- @author NLTP_ASHES
--- Function used to know if there exists a translation for a given game string.
--- @param str string
--- @return boolean
function has_translation(str)
    return game.translate_string(str) ~= str
end

--- @author NLTP_ASHES
--- Function used to know if there exists a translation for a given game string.
--- @param str string
--- @return boolean
function get_translation(str,...)
    if not has_translation(str) then return "No translation" end

    local string = game.translate_string(str)

    if (select('#',...) >= 1) then
        local i = 0
        local p = {...}
        local function sr()
            i = i + 1
            if (type(p[i]) == "userdata") then
                return "userdata"
            end
            return tostring(p[i])
        end
        string = string.gsub(string,"%%s",sr)
    end

    return string
end

--- Returns Item colour string 
---@param itm_clr string
function mcm_to_itm_clr(itm_clr)
    local start, _end = string.find(itm_clr, "_")
    --printf("%s %s %s", itm_clr, start, _end)
    return "d_"..string.sub(itm_clr, _end+1, #itm_clr)
end

--- Alternative version of Item colour string
---@param itm_clr string
function alt_itm_clr(itm_clr)
    if string.find(itm_clr, "yellow") then
        return "pda_yellow"
    elseif string.find(itm_clr, "white") then
        return "pda_white"
    elseif string.find(itm_clr, "black") then
        return GetARGB(1, 1, 1, 1)
    else
        return itm_clr
    end
end

--- Alternative print_table
---@param tbl table
---@param msg string
function print_table(tbl, msg)
    if msg  then
        printf("%s", msg)
    end
    for k, v in pairs(tbl) do
        printf("Key: %s", k)
        if type(v) ~= "table" then            
            printf("Value: %s", v)
        else
            print_table(v, "Showing nested table")
        end
    end
end

--- Compares the values and keys of 2 tables
---@param a table
---@param b table
function compare_tables(a,b) --algorithm is O(n log n), due to table growth.
    if #a ~= #b then return false end -- early out
    local t1,t2 = {}, {} -- temp tables
    for k,v in pairs(a) do -- copy all values into keys for constant time lookups
        t1[k] = (t1[k] or 0) + 1 -- make sure we track how many times we see each value.
    end
    for k,v in pairs(b) do
        t2[k] = (t2[k] or 0) + 1
    end
    for k,v in pairs(t1) do -- go over every element
        if v ~= t2[k] then return false end -- if the number of times that element was seen don't match...
    end
    return true
end

--- Checks list of game objects for a section
---@param tbl table
---@param sect string
function contains_sect(tbl, sect)
    for idx, obj in pairs(tbl) do
        if obj:section() == sect then
            return true
        end
    end
    return false
end

--- Checks list of game objects for an id
---@param tbl table
---@param id number
function contains_id(tbl, id)
    for idx, obj in pairs(tbl) do
        if obj:id() == id then
            return true
        end
    end
    return false
end
--[[    
   Repackable Medpacks
   Author: AntGlobes
   Source: https://www.moddb.com/mods/repackable-medpacks
   Version: v1.0
   Last Modified: 10/12/23
   Purpose: Utility functions, some reused from past addons. Credited if not authored by AG
--]]

-- Imports
get_config = rpmk_mcm.get_config
set_config = rpmk_mcm.set_config


-- Configs
ini_medpack = ini_file_ex("items\\items\\items_repackable_medpack.ltx", true)
ini_medical = ini_file_ex("items\\items\\items_medical.ltx")
ini_drugs = ini_file_ex("items\\items\\items_drugs.ltx")
ini_drink = ini_file_ex("items\\items\\items_drink.ltx")
ini_manager = ini_file_ex("items\\settings\\itms_manager.ltx")
ini_eft_meds = ini_file_ex("mod_system_eftmeds_bhsro.ltx")
-- If you want to include an item in the medpack, put it's section here
-- Add config file in here to convert section to name
config_list = {ini_medical, ini_drugs, ini_drink, ini_eft_meds}

-------------------------
-- Tables
-------------------------
-- Returns common non-item and vanilla medkits to exclude when searching for medpack compat items 
sect_to_exclude = {
    ["identity_immunities"] = true,
    ["booster"] = true,
    ["medkit_ai1"] = true,
    ["medkit_ai2"] = true,
    ["medkit_ai3"] = true,
    ["booster_multi"] = true,

}

-- Common surface types
surfaces = {
    "grass", "earth", "tin", "water", "wood", "metal", "soft", "gravel", "bushes", "default",
    "glass", "concrete", "dirt", "sand", "tree", "clothes", "tile", "asphalt", "furniture"
}

-- Condition reduction based on the surface type
damages = {
    ["grass"] = 0.001,
    ["tin"] = 0.001,
    ["soft"] = 0.001,
    ["clothes"] = 0.001,
    ["metal"] = 0.001,
    ["concrete"] = 0.001,
    ["tile"] = 0.001,
    ["glass"] = 0.001,
    ["tree"] = 0.001,
    ["wood"] = 0.001,
    ["dirt"] = 0.002,
    ["furniture"] = 0.002,
    ["earth"] = 0.0025,
    ["asphalt"] = 0.003,
    ["sand"] = 0.004,
    ["default"] = 0.01,
    ["water"] = 0.015,
    ["bushes"] = 0.02,
    ["gravel"] = 0.02,
}

function dbg_pr(header, str, ...)
    if get_config("main", "enable_debug") then
        printf(header, strformat(str, ...))
    end
end




------------------
-- Table Related
------------------

--- Check if table contains a key
---@param tbl table
---@param key any
function contains(tbl, key)
    for k, v in pairs(tbl) do
        if k == key then
            return true, v
        end
    end
    return false
end

--- Get if the index of a value in a table, default by value
---@param tbl table
---@param value any
---@param by_key boolean
function index_of(tbl, value, by_key)
    for k, v in pairs(tbl) do
        if not by_key then 
            if v == value then
                return k
            end
        else
            if k == value then
                return k
            end
        end
    end
    return false
end

--- Get all total of all values in a table
---@param tbl table
function sum(tbl)
    local sum = 0
    for _, val in pairs(tbl) do
        sum = sum + val
    end
    return sum
 end

 --- Get all total of all values in any nested tables
 ---@param tbl table
 function sum_nested(tbl)
    local sum = 0
    for sect, t in pairs(tbl) do
        for k, v in pairs(t) do
            if type(t[k]) == "number" then
                sum = sum + v
            end
        end
    end
    return sum
 end

 --- table.concat but by key 
 ---@param tbl table
 function concat_pairs(tbl)
    local result = ""
    for key, value in pairs(tbl) do
        result = result .. key ..  ", "
    end
    
    result = result:sub(1, -3)
    return result
end

--- table.concat alternative
---@param tbl table
function concat(tbl)
    local result = ""
    for key, value in pairs(tbl) do
        result = result ..value..  ", "
    end
    
    result = result:sub(1, -3)
    return result
end

--- Get a list of sections from objects
---@param objs table{game_objects}
function obj_to_sect_list(objs)
    local sect_list = {}
    for _, obj in ipairs(objs) do
        sect_list[#sect_list + 1] = obj:section()
    end
    --printf("sect list %s", table.concat(sect_list, ","))
    return sect_list
end


--- Returns printable format for table, visualised as either a string or a table
---@param tbl table
---@param return_string boolean
---@param tbl_str string
function print_table(tbl, return_string, tbl_str)
    if not return_string then
       return utils_data.print_table(tbl, false, true)
    end
    local tbl_str = tbl_str or ""
    for k, v in pairs(tbl) do
        tbl_str = tbl_str .. strformat("%s", k)
        if type(v) == "table" then
            print_table(v, true, tbl_str)
        end
        tbl_str = tbl_str .. strformat("=%s ", v)
    end
    return tbl_str
end

--- Compares the values and keys of 2 tables
---@param a table
---@param b table
function compare_tables(a,b) --algorithm is O(n log n), due to table growth.
    if #a ~= #b then return false end -- early out
    local t1,t2 = {}, {} -- temp tables
    for k,v in pairs(a) do -- copy all values into keys for constant time lookups
        t1[k] = (t1[k] or 0) + 1 -- make sure we track how many times we see each value.
    end
    for k,v in pairs(b) do
        t2[k] = (t2[k] or 0) + 1
    end
    for k,v in pairs(t1) do -- go over every element
        if v ~= t2[k] then return false end -- if the number of times that element was seen don't match...
    end
    return true
end

--- Checks list of game objects for a section
---@param tbl table
---@param sect string
function contains_sect(tbl, sect)
    for idx, obj in pairs(tbl) do
        if obj:section() == sect then
            return true
        end
    end
    return false
end

--- Checks list of game objects for an id
---@param tbl table
---@param id number
function contains_id(tbl, id)
    for idx, obj in pairs(tbl) do
        if obj:id() == id then
            return true
        end
    end
    return false
end

------------------------------------
-- Displaying Message on Screen
------------------------------------

--- Display News Manager message
---@param text_string string
---@param values any
---@param medpack_type string
function display_msg(text_string, values, medpack_type)
    if not get_config("main", "display_msg") then return end
    printf("Displaying message: %s with icon for %s", get_translation(text_string, values), medpack_type)
    news_manager.send_tip(db.actor, get_translation(text_string, values), nil, "repack_medpack_"..medpack_type, 1500)
end

--- Display Screen message
---@param message string
---@param values any
---@param delay number
---@param colour ARGB
function display_screen_msg(message, values, delay, colour)
    actor_menu.set_msg(1, get_translation(message, values), delay, colour)
end

-----------------------------------
-- Translation Strings i.e ui text
-----------------------------------

--- @author NLTP_ASHES
--- Function used to know if there exists a translation for a given game string.
--- @param str string
--- @return boolean
function has_translation(str)
    return game.translate_string(str) ~= str
end

--- @author NLTP_ASHES
--- Function used to know if there exists a translation for a given game string.
--- @param str string
--- @return boolean
function get_translation(str,...)
    if not has_translation(str) then return "No translation" end

    local string = game.translate_string(str)

    if (select('#',...) >= 1) then
        local i = 0
        local p = {...}
        local function sr()
            i = i + 1
            if (type(p[i]) == "userdata") then
                return "userdata"
            end
            return tostring(p[i])
        end
        string = string.gsub(string,"%%s",sr)
    end

    return string
end

--- Returns Item colour string 
---@param itm_clr string
function mcm_to_itm_clr(itm_clr)
    local start, _end = string.find(itm_clr, "_")
    --printf("%s %s %s", itm_clr, start, _end)
    return "d_"..string.sub(itm_clr, _end+1, #itm_clr)
end

--- Alternative version of Item colour string
---@param itm_clr string
function alt_itm_clr(itm_clr)
    if string.find(itm_clr, "yellow") then
        return "pda_yellow"
    elseif string.find(itm_clr, "white") then
        return "pda_white"
    elseif string.find(itm_clr, "black") then
        return GetARGB(1, 1, 1, 1)
    else
        return itm_clr
    end
end

--- Returns XML valid colour string 
---@param any
function get_colour_string(name)
    return strformat("%c[%s]", name)
end

-- Descr Colours
default_clr = get_colour_string("default")
blue_clr = get_colour_string("d_blue")
title_grey_clr = get_colour_string("ui_gray_3")
text_grey_clr = get_colour_string("ui_gray_2")
cyan_clr = get_colour_string("d_cyan")
orange_clr = get_colour_string("d_orange")
red_clr = get_colour_string("d_red")


-- Colour Related

-- Get xml defined colour
function get_colour(name)
    return utils_xml.get_color(name)
end

--- Get colour based on medpack's condition
---@param condition number
function get_condition_colour(condition)
    condition = math.floor(condition * 100)
    if condition > 75 then
        return get_colour_string("d_green")
    elseif condition <= 75 and condition >= 50  then
        return get_colour_string("pda_yellow")
    elseif condition < 50 and condition > 25 then
        return get_colour_string("d_orange")
    else
        return get_colour_string("d_red")
    end
end

--- Convert section to item name
---@param sect string
function sect_to_name(sect)
    for _, config in pairs(config_list) do
        if config:section_exist(sect) then
            return game.translate_string(config:r_value(sect, "inv_name"))
        end
    end
end

--- Get weight of item by section
---@param item string
function get_item_weight(item)
    for _, config in pairs(config_list) do
        if config:section_exist(item) then
            return config:r_float_ex(item, "inv_weight")
        end
    end
    return 0.01
end

--- Combine match items from current and new contents
---@param contents table
---@param new_contents table
function combine_contents(contents, new_contents)
    for sect, details in pairs(new_contents) do
        -- printf(#contents)
       
            if contents[sect]  then
                pr("adding %s %s %s to contents", sect, table.concat(contents[sect].uses,","), contents[sect].amount)
                contents[sect].amount = contents[sect].amount + new_contents[sect].amount
                for i=1, #new_contents[sect].uses do
                    table.insert(contents[sect].uses, new_contents[sect].uses[i])
                end
            else
                contents[sect] = {uses=new_contents[sect].uses, amount=new_contents[sect].amount}
                pr("default %s %s %s to contents", sect, table.concat(contents[sect].uses,","), contents[sect].amount)
            end
       
    end
    return contents
end

function capitalise(str)
    return (str:gsub("^%l", string.upper))
end

function sentence_case(str)
    local sentence = ""
     for word in string.gmatch(str, "%S+") do
        sentence = sentence.." ".. capitalise(word)
     end
    return sentence
end
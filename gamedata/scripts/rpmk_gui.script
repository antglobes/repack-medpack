GUI = nil

menu_names = {
	[1] = "basic_menu",
	[2] = "army_menu",
	[3] = "sci_menu"
}

side_menu_names = {
	[1] = "basic_side_menu",
	[2] = "army_side_menu",
	[3] = "sci_side_menu"
}

local weight_unit = game.translate_string("st_kg")
---------------------------------------

local medpack_obj = nil
function display_medpack_gui(unpck, fill, medpack)
    hide_hud_inventory()

    if not GUI then
        GUI = MPG()
    end

    if GUI and not GUI:IsShown() then
		medpack_obj = medpack
        GUI:Reset()
        GUI:ShowDialog(true)
        Register_UI("MPG", "medpack_gui")
    end
end


class "MPG" (CUIScriptWnd)

function MPG:__init() super()
	self:InitControls()
    self:InitCallBacks()
    
end    

function MPG:__finalize()
end

function MPG:InitControls()
    self:SetWndRect(Frect():set(0,0,1024,768))
    self:SetAutoDelete(true)

    self.xml = CScriptXmlInit()
    local xml = self.xml
    xml:ParseFile("ui_rmpk_gui.xml")

	self.medpack = medpack_obj
	self.medpack_type = rpmk_medpack.get_medpack_type(medpack:id())
	self.active_menu = self.medpack_type.."_menu"
	self.active_side_menu = self.medpack_type.."_side_menu"

	self.menus = {}
    self.side_menus = {}

	self.tg_info  	     = nil
	self.tg_info_step  	 = 2 --[ms]
	self.tg_inv  		 = 0 --[ms]
	self.tg_inv_step  	 = 100 --[ms]
	self.tg_stats        = 0
	self.tg_stats_step   = 2000 --[ms]
	self.tg_hint         = nil
	self.tg_hint_step    = 1000 --[ms]
	self.tg_m1		     = 0
    
	-- Cell Contaniers
    self.basic_menu = xml:InitStatic("basic_menu", self)
    self.menus["basic_menu"] = utils_ui.UICellContainer("basic_menu", self, nil, nil, self.basic_menu, false)
    self.menus["basic_menu"].sort_method = "props"
    self.menus["basic_menu"].disable_callback["On_CC_Add"] = true
    self.menus["basic_menu"].disable_callback["On_CC_Remove"] = true
    self.menus["basic_menu"].scroll:SetWndPos(vector2():set( 10 , 0 ))
    --self.menus["basic_menu"]:SetGridSpecs(10,1)
    self.menus["basic_menu"]:Show(false)

	self.basic_side_menu = xml:InitStatic("basic_side_menu", self)
	self.side_menus["basic_side_menu"] = utils_ui.UICellContainer("basic_side_cont", self, nil, nil, self.basic_side_menu, false)
	self.side_menus["basic_side_menu"].sort_method = "props"
	self.side_menus["basic_side_menu"].disable_callback["On_CC_Add"] = true
	self.side_menus["basic_side_menu"].disable_callback["On_CC_Remove"] = true
	self.side_menus["basic_side_menu"].scroll:SetWndPos(vector2():set( 10 , 0 ))
	self.side_menus["basic_side_menu"].can_select = "inventory"
	self.side_menus["basic_side_menu"]:Show(false)

    self.army_menu = xml:InitStatic("army_menu", self)
    self.menus["army_menu"] = utils_ui.UICellContainer("army_menu", self, nil, nil, self.army_menu, false)
    self.menus["army_menu"].sort_method = "props"
    self.menus["army_menu"].disable_callback["On_CC_Add"] = true
    self.menus["army_menu"].disable_callback["On_CC_Remove"] = true
    self.menus["army_menu"].scroll:SetWndPos(vector2():set( 10 , 0 ))
    --self.menus["army_menu"]:SetGridSpecs(10,1)
    self.menus["army_menu"]:Show(false)

	self.army_side_menu = xml:InitStatic("army_side_menu", self)
	self.side_menus["army_side_menu"] = utils_ui.UICellContainer("army_side_cont", self, nil, nil, self.army_side_menu, false)
	self.side_menus["army_side_menu"].sort_method = "props"
	self.side_menus["army_side_menu"].disable_callback["On_CC_Add"] = true
	self.side_menus["army_side_menu"].disable_callback["On_CC_Remove"] = true
	self.side_menus["army_side_menu"].scroll:SetWndPos(vector2():set( 10 , 0 ))
	self.side_menus["army_side_menu"]:Show(false)

    self.sci_menu = xml:InitStatic("sci_menu", self)
    self.menus["sci_menu"] = utils_ui.UICellContainer("sci_menu", self, nil, nil, self.sci_menu, false)
    self.menus["sci_menu"].sort_method = "props"
    self.menus["sci_menu"].disable_callback["On_CC_Add"] = true
    self.menus["sci_menu"].disable_callback["On_CC_Remove"] = true
    self.menus["sci_menu"].scroll:SetWndPos(vector2():set( 10 , 0 ))
    --self.menus["basic_menu"]:SetGridSpecs(10,1)
    self.menus["sci_menu"]:Show(false)

	self.sci_side_menu = xml:InitStatic("sci_side_menu", self)
	self.side_menus["sci_side_menu"] = utils_ui.UICellContainer("sci_side_cont", self, nil, nil, self.sci_side_menu, false)
	self.side_menus["sci_side_menu"].sort_method = "props"
	self.side_menus["sci_side_menu"].disable_callback["On_CC_Add"] = true
	self.side_menus["sci_side_menu"].disable_callback["On_CC_Remove"] = true
	self.side_menus["sci_side_menu"].scroll:SetWndPos(vector2():set( 10 , 0 ))
	self.side_menus["sci_side_menu"]:Show(false)
    
	-- Info box
	self.item_info = utils_ui.UIInfoItem(self)

	-- Item Properties
	self.item_props = utils_ui.UICellProperties(self)

	self.unpack_all_btn = xml:Init3tButton("unpack_all_btn", self)
	self:Register(self.unpack_all_btn, "unpack_all")

    self.fill_all_btn = xml:Init3tButton("fill_all_btn", self)
	self:Register(self.fill_all_btn, "fill_all")

    self.close_btn = xml:Init3tButton("close_btn", self)
	self:Register(self.close_btn, "close")

	self.medpack_weight = xml:InitTextwnd("weight", self)
	self.medpack_weight:Show(false)

	self.medpack_total_items = xml:InitTextwnd("total_items", self)
	self.medpack_total_items:Show(false)
end

function MPG:InitCallBacks()
    self:AddCallback("unpack_all", ui_events.BUTTON_CLICKED, self.UnpackAll, self)
    self:AddCallback("fill_all", ui_events.BUTTON_CLICKED, self.FillAll, self)
    self:AddCallback("close", ui_events.BUTTON_CLICKED, self.Close, self)
end

function MPG:UnpackAll()
end

function MPG:FillAll()
end

function MPG:Close()
end







ini_medpack = rpmk_utils.ini_medpack
ini_filters = ini_file_ex("items\\items\\items_repackable_medpack_filters.ltx")
add_functor = custom_functor_autoinject.add_functor
table_contains = rpmk_utils.table_contains
get_trader_type = trader_autoinject.get_trader_type
TraderUpdate = trader_autoinject.update
sections = ini_filters:get_sections()

function pr(str,...)
    rpmk_utils.dbg_pr("Repackable Medpacks| Cosmetics: %s", str, ...)
end

stickers = {
    "anti_rad", "anti_chem", "anti_psy",
    "health_reco", "stam_reco", "painkillers",
    "surgical_equ", "bleed_prevent", "injectors_heals",
    "injectors_bleed", "injectors_painkillers", "food",
    "drink", "misc"
}

PLASTIC_WALLETS_TABLE = {}

function pwt_new_entry(m_id, pw)
    local id = pw:id()
    local section = pw:section()
    local contents = {}
    local total_items = 0
    local total_weight = 0
    local max_weight = get_max_weight(section)
    local zipped = true
    local category = {}
    local filter_items = {}
    local sticker_attached = false
    PLASTIC_WALLETS_TABLE[#PLASTIC_WALLETS_TABLE + 1] = {id=id, medpack_id=m_id, section=section, total_items=total_items, category=category,
                                                         total_weight=total_weight,  zipped=zipped, filter_items=filter_items, sticker_attached=sticker_attached }

    pr("Plastic Wallets Table new entry: %s", rpmk_utils.print_table(PLASTIC_WALLETS_TABLE[#PLASTIC_WALLETS_TABLE], true))
end

function pwt_remove_entry(id)
    for idx, entry in ipairs(PLASTIC_WALLETS_TABLE) do
        if id == entry.id then
            PLASTIC_WALLETS_TABLE[idx] = nil
            pr("Removing entry from plastic wallets table at idx: %s", idx)
        end
    end
end

--- Change an var's value in a certain entry by id
---@param id number
---@param var string
---@param value any
function pwt_get_var(id, var)
    for idx, entry in ipairs(PLASTIC_WALLETS_TABLE) do
        if id == entry.id then
            return entry[var]
        end
    end
end

--- Get an var's value from a certain entry by id
---@param id number
---@param var any
function pwt_set_var(id, var, value)
    for idx, entry in ipairs(PLASTIC_WALLETS_TABLE) do
        if id == entry.id and entry[var] and type(var) == "string" then
            entry[var] = value
        end
    end
end

--- Change all the contents of an entry, if the ids match
---@param id number
---@param tbl table
function pwt_update_vars(id, tbl)
    for idx, entry in ipairs(PLASTIC_WALLETS_TABLE) do
        if id == entry.id then
            for k, v in pairs(entry) do
                if tbl[k] then
                    entry[k] = tbl[k]
                end
            end
        end
    end
end

--- Debugging function, returns all vars in an entry
---@param id number
---@param unpck boolean
function pwt_all_vars(id, unpck)
    for idx, entry in ipairs(PLASTIC_WALLETS_TABLE) do
        if id == entry["id"] then
            if not unpck then
                return entry
            end
            return unpack(entry)
        end
    end
end

function is_pw_in_table(id)
    for _, entry in pairs(PLASTIC_WALLETS_TABLE) do
        if id == entry.id then
            return true
        end
    end
    return false
end

--- Get a Wallet's section
---@param id number
function get_section(id)
    return pwt_get_var(id, "section")
end

--- Get a Wallet's contents
---@param id number
function get_contents(id)
    return pwt_get_var(id, "contents")
end

--- Get a Wallet's total number of items
---@param id number
function get_total_itms(id)
    return pwt_get_var(id, "total_itms")
end

--- Get a Wallet's weight
---@param id number
function get_total_weight(id)
    return mt_get_var(id, "total_weight") or 0
end

--- Get a Wallet's max weight
---@param id number
function get_max_weight(id)
    return pwt_get_var(id, "max_weight")
end

--- Get a Wallet's base weight i.e weight of the bag
---@param id number
function get_base_weight(id)
    return pwt_get_var(id, "base_weight")
end

--- Get a Wallet's closed status
---@param id number
function get_closed_status(id)
    return pwt_get_var(id, "closed")
end

--- Get a Wallet's zipped status
---@param id number
function get_zipped_status(id)
    return pwt_get_var(id, "zipped")
end

-------------------------------
-- Setters
-------------------------------

--- Change the contents of a Wallet
---@param id number
---@param contents table
function set_contents(id, contents)
    pwt_set_var(id, "contents", contents)
end

--- Change the total number of items for a Wallet
---@param id number
---@param total_itms number
function set_total_itms(id, total_itms)
    pwt_set_var(id, "total_itms", total_itms)
end

--- Change total weight of a Wallet
---@param id number
---@param total_weight number
function set_total_weight(id, total_weight)
    pwt_set_var(id, "total_weight", total_weight)
end

--- Change zipped status of a Wallet
---@param id number
---@param zipped boolean
function set_zipped_status(id, zipped)
    pwt_set_var(id, "zipped", zipped)
end

--- Change the condition of a Wallet
---@param medpack game_object
---@param condition number
function set_conditon(pw, condition)
    if not is_pw_in_table(pw:id()) then return end
    pw:set_condition(condition)
end

function get_filter_num_by_type(medpack_type)
    filter_nums = {
        ["basic"] = 2,
        ["army"] = 3,
        ["sci"] = 4
    }
    pr("Max filters %s allowed for %s medpack", filter_nums[medpack_type], medpack_type)
    return filter_nums[medpack_type]
end

function is_filter_item(sect)
    return #{string.find(sect, "itm_plastic_wallet_")} > 0 
end

function is_sticker(sect)
    for i=1, #stickers do
        if #{string.find(sect, stickers[i])} > 0 then
            return true
        end
    end
    return false
end

function is_filter_category_set(filter)
    return is_not_empty(pwt_get_var(filter:id(), "category"))
end

function filter_menu_string(sect)
    local start, _end = string.find(sect, "itm_plastic_wallet_")
    return string.sub(sect, _end + 1, #sect) .. " plastic wallet"
end

function get_category_stickers()
    local stickers = {}
    db.actor:iterate_inventory(nil, function(temp, obj)
        if is_sticker(obj:section()) then
            stickers[#stickers + 1] = obj
        end
    end)
    return stickers
end

-- Trader Inject

function patch_traders(trader_type) 
    local accepted_traders = {
        [trader_autoinject.MEDIC] = true, 
        [trader_autoinject.SUPPLIER] = true, 
    }
    return accepted_traders[trader_type]
end

function get_patches()
    local patches = {}
    for _, sect in pairs(sections) do
        if string.match(sect, "itm_category_patch_") then
            patches[#patches + 1] = sect
        end
    end
    return patches
end

function get_packs()
    local packs = {}
    for _, sect in pairs(sections) do
        if string.match(sect, "itm_category_pack_") then
            packs[#packs + 1] = sect
        end
    end
    return packs
end

function get_rand_patch()
    local patches = get_patches()
    return patches[math.random(1, #patches)]
end

function get_rand_pack()
    local packs = get_packs()
    return packs[math.random(1, #packs)]
end


function patch_supply_level(npc)
    local supply_level = {["patch"] = 0, ["pack"] = 0}
    local function search(temp, obj)
        if is_patch(obj) then
            supply_level[obj:section()] = supply_level["patch"] + 1
        elseif is_pack then
            supply_level[obj:section()] = supply_level["pack"] + 1
        end
    end
    npc:iterate_inventory(nil, search)
    return supply_level
end

function restore_patch_supply_level(npc)
    local supply_level = patch_supply_level(npc)
    local patches = {}

    repeat
        if supply_level["patch"] < 2 then
            patches[#patches] = get_rand_patch()
            supply_level["patch"] = supply_level["patch"] + 1
        end

        if supply_level["pack"] < 1 then
            patches[#patches] = get_rand_pack()
            supply_level["pack"] = supply_level["pack"] + 1
        end
    until supply_level["patch"] == 2 and supply_level["pack"] == 1 and #patches == 3

    return patches
end

function stock_patches(npc)
    if not patch_traders(get_trader_type(npc)) then return end
    local trade_t = restore_patch_supply_level(npc)
    trader_autoinject.spawn_items(npc, trade_t, true)
end

function trader_autoinject.update(npc)
    TraderUpdate(npc)
    stock_patches(npc)
end

-- Unpack Multipack Functor
function unpack_mp_cond_met(obj)
    if obj and obj:section() == "itm_marker_multipack" then
        return true
    end
    return false
end

function unpack_mp_cond_function(obj, bag, mode)
    local p = obj:parent()
	if not (p and p:id() == AC_ID) then return end

    return unpack_mp_cond_met(obj)
end

function unpack_mp_menu_function(obj, bag, mode)
    return game.translate_string("st_rpmk_menu_unpack")
end

function unpack_mp_action(obj, bag, mode)
    for _, item in ipairs(parse_list(ini_medpack, obj:section(), "contents")) do
        pr("Unpacking %s from multipack", item)
        local max_uses = ini_medpack:r_float_ex(item, "max_uses")
        local rand_cond = round_idp(math.random() + math.random(8, 10), 2)
        pr("With %s uses and %s% condition", max_uses, rand_cond * 10)
        alife_create_item(item, db.actor, {["uses"]=max_uses, ["cond"]=rand_cond})
    end
    alife_release(obj)
end

add_functor("rpmk_multipack_unpack", unpack_mp_cond_function, unpack_mp_menu_function, nil, unpack_mp_action)

-- Set category
function set_category_cond_met(obj)
    if obj and is_filter_item(obj) and not is_filter_category_set(obj) then return true end return false
end

function set_category_cond_function(obj, bag, mode)
    local p = obj:parent()
	if not (p and p:id() == AC_ID) then return end 

    return set_category_cond_function
end

function set_category_menu_function(obj, bag, mode)
    return game.translate_string("st_rpmk_menu_set_category")
end

function set_category_action(obj, bag, mode)
    rpmk_gui.display_category_menu(obj)
end

add_functor("rpmk_filter_set_category", set_category_cond_function, set_category_menu_function, nil, set_category_action)
-----------------------
-- Callbacks
-----------------------
local function save_table(mdata)
    local SAVE_TABLE = {}
    copy_table(SAVE_TABLE, PLASTIC_WALLETS_TABLE)
    mdata.active_medpack_filters = SAVE_TABLE
end

local function load_table(mdata)
    local SAVE_TABLE = mdata.active_medpack_filters or {}
    copy_table(PLASTIC_WALLETS_TABLE, SAVE_TABLE)
end

function on_game_start()
    RegisterScriptCallback("save_state", save_table)
    RegisterScriptCallback("load_state", load_table)
end